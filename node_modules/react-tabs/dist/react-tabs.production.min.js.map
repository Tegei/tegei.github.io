{"version":3,"file":"react-tabs.production.min.js","sources":["../src/helpers/elementTypes.js","../src/helpers/childrenDeepMap.js","../node_modules/clsx/dist/clsx.m.js","../src/helpers/uuid.js","../src/helpers/count.js","../src/components/UncontrolledTabs.js","../src/components/Tabs.js","../src/components/TabList.js","../src/components/Tab.js","../src/components/TabPanel.js"],"sourcesContent":["function makeTypeChecker(tabsRole) {\n  return (element) => !!element.type && element.type.tabsRole === tabsRole;\n}\n\nexport const isTab = makeTypeChecker('Tab');\nexport const isTabList = makeTypeChecker('TabList');\nexport const isTabPanel = makeTypeChecker('TabPanel');\n","import { Children, cloneElement } from 'react';\nimport { isTabPanel, isTab, isTabList } from './elementTypes';\n\nfunction isTabChild(child) {\n  return isTab(child) || isTabList(child) || isTabPanel(child);\n}\n\nexport function deepMap(children, callback) {\n  return Children.map(children, (child) => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return null;\n\n    if (isTabChild(child)) {\n      return callback(child);\n    }\n\n    if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      // Clone the child that has children and map them too\n      return cloneElement(child, {\n        ...child.props,\n        children: deepMap(child.props.children, callback),\n      });\n    }\n\n    return child;\n  });\n}\n\nexport function deepForEach(children, callback) {\n  return Children.forEach(children, (child) => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return;\n\n    if (isTab(child) || isTabPanel(child)) {\n      callback(child);\n    } else if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      if (isTabList(child)) callback(child);\n      deepForEach(child.props.children, callback);\n    }\n  });\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","// Get a universally unique identifier\nlet count = 0;\nexport default function uuid() {\n  return `react-tabs-${count++}`;\n}\n\nexport function reset() {\n  count = 0;\n}\n","import { deepForEach } from './childrenDeepMap';\nimport { isTab } from './elementTypes';\n\nexport function getTabsCount(children) {\n  let tabCount = 0;\n  deepForEach(children, (child) => {\n    if (isTab(child)) tabCount++;\n  });\n\n  return tabCount;\n}\n","import PropTypes from 'prop-types';\nimport React, { cloneElement, useRef } from 'react';\nimport cx from 'clsx';\nimport uuid from '../helpers/uuid';\nimport { childrenPropType } from '../helpers/propTypes';\nimport { getTabsCount as getTabsCountHelper } from '../helpers/count';\nimport { deepMap } from '../helpers/childrenDeepMap';\nimport { isTabList, isTabPanel, isTab } from '../helpers/elementTypes';\n\nfunction isNode(node) {\n  return node && 'getAttribute' in node;\n}\n\n// Determine if a node from event.target is a Tab element\nfunction isTabNode(node) {\n  return isNode(node) && node.getAttribute('data-rttab');\n}\n\n// Determine if a tab node is disabled\nfunction isTabDisabled(node) {\n  return isNode(node) && node.getAttribute('aria-disabled') === 'true';\n}\n\nlet canUseActiveElement;\n\nfunction determineCanUseActiveElement(environment) {\n  const env =\n    environment || (typeof window !== 'undefined' ? window : undefined);\n\n  try {\n    canUseActiveElement = !!(\n      typeof env !== 'undefined' &&\n      env.document &&\n      env.document.activeElement\n    );\n  } catch (e) {\n    // Work around for IE bug when accessing document.activeElement in an iframe\n    // Refer to the following resources:\n    // http://stackoverflow.com/a/10982960/369687\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12733599\n    // istanbul ignore next\n    canUseActiveElement = false;\n  }\n}\n\nconst defaultProps = {\n  className: 'react-tabs',\n  focus: false,\n};\n\nconst propTypes = {\n  children: childrenPropType,\n  direction: PropTypes.oneOf(['rtl', 'ltr']),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n  disabledTabClassName: PropTypes.string,\n  disableUpDownKeys: PropTypes.bool,\n  domRef: PropTypes.func,\n  focus: PropTypes.bool,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: PropTypes.func.isRequired,\n  selectedIndex: PropTypes.number.isRequired,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string,\n  environment: PropTypes.object,\n};\n\nconst UncontrolledTabs = (props) => {\n  let tabNodes = useRef([]);\n  let tabIds = useRef([]);\n  let panelIds = useRef([]);\n  const ref = useRef();\n\n  function setSelected(index, event) {\n    // Check index boundary\n    if (index < 0 || index >= getTabsCount()) return;\n\n    const { onSelect, selectedIndex } = props;\n\n    // Call change event handler\n    onSelect(index, selectedIndex, event);\n  }\n\n  function getNextTab(index) {\n    const count = getTabsCount();\n\n    // Look for non-disabled tab from index to the last tab on the right\n    for (let i = index + 1; i < count; i++) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from first on left to index\n    for (let i = 0; i < index; i++) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  function getPrevTab(index) {\n    let i = index;\n\n    // Look for non-disabled tab from index to first tab on the left\n    while (i--) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from last tab on right to index\n    i = getTabsCount();\n    while (i-- > index) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  function getFirstTab() {\n    const count = getTabsCount();\n\n    // Look for non disabled tab from the first tab\n    for (let i = 0; i < count; i++) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  function getLastTab() {\n    let i = getTabsCount();\n\n    // Look for non disabled tab from the last tab\n    while (i--) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  function getTabsCount() {\n    const { children } = props;\n    return getTabsCountHelper(children);\n  }\n\n  function getTab(index) {\n    return tabNodes.current[`tabs-${index}`];\n  }\n\n  function getChildren() {\n    let index = 0;\n    const {\n      children,\n      disabledTabClassName,\n      focus,\n      forceRenderTabPanel,\n      selectedIndex,\n      selectedTabClassName,\n      selectedTabPanelClassName,\n      environment,\n    } = props;\n\n    tabIds.current = tabIds.current || [];\n    panelIds.current = panelIds.current || [];\n    let diff = tabIds.current.length - getTabsCount();\n\n    // Add ids if new tabs have been added\n    // Don't bother removing ids, just keep them in case they are added again\n    // This is more efficient, and keeps the uuid counter under control\n    while (diff++ < 0) {\n      tabIds.current.push(uuid());\n      panelIds.current.push(uuid());\n    }\n\n    // Map children to dynamically setup refs\n    return deepMap(children, (child) => {\n      let result = child;\n\n      // Clone TabList and Tab components to have refs\n      if (isTabList(child)) {\n        let listIndex = 0;\n\n        // Figure out if the current focus in the DOM is set on a Tab\n        // If it is we should keep the focus on the next selected tab\n        let wasTabFocused = false;\n\n        if (canUseActiveElement == null) {\n          determineCanUseActiveElement(environment);\n        }\n\n        if (canUseActiveElement) {\n          wasTabFocused = React.Children.toArray(child.props.children)\n            .filter(isTab)\n            .some((tab, i) => {\n              const env =\n                environment ||\n                (typeof window !== 'undefined' ? window : undefined);\n              return env && env.document.activeElement === getTab(i);\n            });\n        }\n\n        result = cloneElement(child, {\n          children: deepMap(child.props.children, (tab) => {\n            const key = `tabs-${listIndex}`;\n            const selected = selectedIndex === listIndex;\n\n            const props = {\n              tabRef: (node) => {\n                tabNodes.current[key] = node;\n              },\n              id: tabIds.current[listIndex],\n              panelId: panelIds.current[listIndex],\n              selected,\n              focus: selected && (focus || wasTabFocused),\n            };\n\n            if (selectedTabClassName)\n              props.selectedClassName = selectedTabClassName;\n            if (disabledTabClassName)\n              props.disabledClassName = disabledTabClassName;\n\n            listIndex++;\n\n            return cloneElement(tab, props);\n          }),\n        });\n      } else if (isTabPanel(child)) {\n        const props = {\n          id: panelIds.current[index],\n          tabId: tabIds.current[index],\n          selected: selectedIndex === index,\n        };\n\n        if (forceRenderTabPanel) props.forceRender = forceRenderTabPanel;\n        if (selectedTabPanelClassName)\n          props.selectedClassName = selectedTabPanelClassName;\n\n        index++;\n\n        result = cloneElement(child, props);\n      }\n\n      return result;\n    });\n  }\n\n  function handleKeyDown(e) {\n    const { direction, disableUpDownKeys } = props;\n    if (isTabFromContainer(e.target)) {\n      let { selectedIndex: index } = props;\n      let preventDefault = false;\n      let useSelectedIndex = false;\n\n      if (e.keyCode === 32 /* space */ || e.keyCode === 13 /* enter */) {\n        preventDefault = true;\n        useSelectedIndex = false;\n        handleClick(e);\n      }\n\n      if (\n        e.keyCode === 37 /* arrow left */ ||\n        (!disableUpDownKeys && e.keyCode === 38) /* arrow up */\n      ) {\n        // Select next tab to the left, validate if up arrow is not disabled\n        if (direction === 'rtl') {\n          index = getNextTab(index);\n        } else {\n          index = getPrevTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (\n        e.keyCode === 39 /* arrow right */ ||\n        (!disableUpDownKeys && e.keyCode === 40) /* arrow down */\n      ) {\n        // Select next tab to the right, validate if down arrow is not disabled\n        if (direction === 'rtl') {\n          index = getPrevTab(index);\n        } else {\n          index = getNextTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 35) {\n        // Select last tab (End key)\n        index = getLastTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 36) {\n        // Select first tab (Home key)\n        index = getFirstTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      }\n\n      // This prevents scrollbars from moving around\n      if (preventDefault) {\n        e.preventDefault();\n      }\n\n      // Only use the selected index in the state if we're not using the tabbed index\n      if (useSelectedIndex) {\n        setSelected(index, e);\n      }\n    }\n  }\n\n  function handleClick(e) {\n    let node = e.target;\n    do {\n      if (isTabFromContainer(node)) {\n        if (isTabDisabled(node)) {\n          return;\n        }\n\n        const index = [].slice\n          .call(node.parentNode.children)\n          .filter(isTabNode)\n          .indexOf(node);\n        setSelected(index, e);\n        return;\n      }\n    } while ((node = node.parentNode) != null);\n  }\n\n  /**\n   * Determine if a node from event.target is a Tab element for the current Tabs container.\n   * If the clicked element is not a Tab, it returns false.\n   * If it finds another Tabs container between the Tab and `this`, it returns false.\n   */\n  function isTabFromContainer(node) {\n    // return immediately if the clicked element is not a Tab.\n    if (!isTabNode(node)) {\n      return false;\n    }\n\n    // Check if the first occurrence of a Tabs container is `this` one.\n    let nodeAncestor = node.parentElement;\n    do {\n      if (nodeAncestor === ref.current) return true;\n      if (nodeAncestor.getAttribute('data-rttabs')) break;\n\n      nodeAncestor = nodeAncestor.parentElement;\n    } while (nodeAncestor);\n\n    return false;\n  }\n  const {\n    children, // unused\n    className,\n    disabledTabClassName, // unused\n    domRef,\n    focus, // unused\n    forceRenderTabPanel, // unused\n    onSelect, // unused\n    selectedIndex, // unused\n    selectedTabClassName, // unused\n    selectedTabPanelClassName, // unused\n    environment, // unused\n    disableUpDownKeys, // unused\n    ...attributes\n  } = props;\n  return (\n    <div\n      {...attributes}\n      className={cx(className)}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      ref={(node) => {\n        ref.current = node;\n        if (domRef) domRef(node);\n      }}\n      data-rttabs\n    >\n      {getChildren()}\n    </div>\n  );\n};\nUncontrolledTabs.defaultProps = defaultProps;\nUncontrolledTabs.propTypes = propTypes;\nexport default UncontrolledTabs;\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport {\n  childrenPropType,\n  onSelectPropType,\n  selectedIndexPropType,\n} from '../helpers/propTypes';\nimport UncontrolledTabs from './UncontrolledTabs';\nimport { getTabsCount } from '../helpers/count';\n\nconst MODE_CONTROLLED = 0;\nconst MODE_UNCONTROLLED = 1;\nconst propTypes = {\n  children: childrenPropType,\n  direction: PropTypes.oneOf(['rtl', 'ltr']),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n  defaultFocus: PropTypes.bool,\n  defaultIndex: PropTypes.number,\n  disabledTabClassName: PropTypes.string,\n  disableUpDownKeys: PropTypes.bool,\n  domRef: PropTypes.func,\n  focusTabOnClick: PropTypes.bool,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: onSelectPropType,\n  selectedIndex: selectedIndexPropType,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string,\n  environment: PropTypes.object,\n};\nconst defaultProps = {\n  defaultFocus: false,\n  focusTabOnClick: true,\n  forceRenderTabPanel: false,\n  selectedIndex: null,\n  defaultIndex: null,\n  environment: null,\n  disableUpDownKeys: false,\n};\n\nconst getModeFromProps = (props) => {\n  return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n};\n\nconst checkForIllegalModeChange = (props, mode) => {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    mode != undefined &&\n    mode !== getModeFromProps(props)\n  ) {\n    throw new Error(\n      `Switching between controlled mode (by using \\`selectedIndex\\`) and uncontrolled mode is not supported in \\`Tabs\\`.\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.`,\n    );\n  }\n};\n\n/**\n * State:\n *   mode: Initialized only once from props and never changes\n *   selectedIndex: null if controlled mode, otherwise initialized with prop defaultIndex, changed on selection of tabs, has effect to ensure it never gets out of bound\n *   focus: Because we never remove focus from the Tabs this state is only used to indicate that we should focus the current tab.\n *          It is initialized from the prop defaultFocus, and after the first render it is reset back to false. Later it can become true again when using keys to navigate the tabs.\n */\nconst Tabs = (props) => {\n  const { children, defaultFocus, defaultIndex, focusTabOnClick, onSelect } =\n    props;\n\n  const [focus, setFocus] = useState(defaultFocus);\n  const [mode] = useState(getModeFromProps(props));\n  const [selectedIndex, setSelectedIndex] = useState(\n    mode === MODE_UNCONTROLLED ? defaultIndex || 0 : null,\n  );\n\n  useEffect(() => {\n    // Reset focus after initial render, see comment above\n    setFocus(false);\n  }, []);\n\n  if (mode === MODE_UNCONTROLLED) {\n    // Ensure that we handle removed tabs and don't let selectedIndex get out of bounds\n    const tabsCount = getTabsCount(children);\n    useEffect(() => {\n      if (selectedIndex != null) {\n        const maxTabIndex = Math.max(0, tabsCount - 1);\n        setSelectedIndex(Math.min(selectedIndex, maxTabIndex));\n      }\n    }, [tabsCount]);\n  }\n\n  checkForIllegalModeChange(props, mode);\n\n  const handleSelected = (index, last, event) => {\n    // Call change event handler\n    if (typeof onSelect === 'function') {\n      // Check if the change event handler cancels the tab change\n      if (onSelect(index, last, event) === false) return;\n    }\n\n    // Always set focus on tabs unless it is disabled\n    if (focusTabOnClick) {\n      setFocus(true);\n    }\n\n    if (mode === MODE_UNCONTROLLED) {\n      // Update selected index\n      setSelectedIndex(index);\n    }\n  };\n\n  let subProps = { ...props };\n\n  subProps.focus = focus;\n  subProps.onSelect = handleSelected;\n\n  if (selectedIndex != null) {\n    subProps.selectedIndex = selectedIndex;\n  }\n  delete subProps.defaultFocus;\n  delete subProps.defaultIndex;\n  delete subProps.focusTabOnClick;\n  return <UncontrolledTabs {...subProps}>{children}</UncontrolledTabs>;\n};\n\nTabs.propTypes = propTypes;\nTabs.defaultProps = defaultProps;\nTabs.tabsRole = 'Tabs';\n\nexport default Tabs;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport cx from 'clsx';\n\nconst defaultProps = {\n  className: 'react-tabs__tab-list',\n};\nconst propTypes = {\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n};\nconst TabList = (props) => {\n  const { children, className, ...attributes } = props;\n\n  return (\n    <ul {...attributes} className={cx(className)} role=\"tablist\">\n      {children}\n    </ul>\n  );\n};\n\nTabList.tabsRole = 'TabList';\nTabList.propTypes = propTypes;\nTabList.defaultProps = defaultProps;\nexport default TabList;\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useRef } from 'react';\nimport cx from 'clsx';\n\nconst DEFAULT_CLASS = 'react-tabs__tab';\nconst DEFAULT_PROPS = {\n  className: DEFAULT_CLASS,\n  disabledClassName: `${DEFAULT_CLASS}--disabled`,\n  focus: false,\n  id: null,\n  panelId: null,\n  selected: false,\n  selectedClassName: `${DEFAULT_CLASS}--selected`,\n};\n\nconst propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.object,\n    PropTypes.string,\n  ]),\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n  disabled: PropTypes.bool,\n  tabIndex: PropTypes.string,\n  disabledClassName: PropTypes.string,\n  focus: PropTypes.bool, // private\n  id: PropTypes.string, // private\n  panelId: PropTypes.string, // private\n  selected: PropTypes.bool, // private\n  selectedClassName: PropTypes.string,\n  tabRef: PropTypes.func,\n};\n\nconst Tab = (props) => {\n  let nodeRef = useRef();\n  const {\n    children,\n    className,\n    disabled,\n    disabledClassName,\n    focus,\n    id,\n    panelId,\n    selected,\n    selectedClassName,\n    tabIndex,\n    tabRef,\n    ...attributes\n  } = props;\n\n  useEffect(() => {\n    if (selected && focus) {\n      nodeRef.current.focus();\n    }\n  }, [selected, focus]);\n\n  return (\n    <li\n      {...attributes}\n      className={cx(className, {\n        [selectedClassName]: selected,\n        [disabledClassName]: disabled,\n      })}\n      ref={(node) => {\n        nodeRef.current = node;\n        if (tabRef) tabRef(node);\n      }}\n      role=\"tab\"\n      id={id}\n      aria-selected={selected ? 'true' : 'false'}\n      aria-disabled={disabled ? 'true' : 'false'}\n      aria-controls={panelId}\n      tabIndex={tabIndex || (selected ? '0' : null)}\n      data-rttab\n    >\n      {children}\n    </li>\n  );\n};\nTab.propTypes = propTypes;\n\nTab.tabsRole = 'Tab';\nTab.defaultProps = DEFAULT_PROPS;\nexport default Tab;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport cx from 'clsx';\n\nconst DEFAULT_CLASS = 'react-tabs__tab-panel';\nconst defaultProps = {\n  className: DEFAULT_CLASS,\n  forceRender: false,\n  selectedClassName: `${DEFAULT_CLASS}--selected`,\n};\nconst propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object,\n  ]),\n  forceRender: PropTypes.bool,\n  id: PropTypes.string, // private\n  selected: PropTypes.bool, // private\n  selectedClassName: PropTypes.string,\n  tabId: PropTypes.string, // private\n};\nconst TabPanel = (props) => {\n  const {\n    children,\n    className,\n    forceRender,\n    id,\n    selected,\n    selectedClassName,\n    tabId,\n    ...attributes\n  } = props;\n\n  return (\n    <div\n      {...attributes}\n      className={cx(className, {\n        [selectedClassName]: selected,\n      })}\n      role=\"tabpanel\"\n      id={id}\n      aria-labelledby={tabId}\n    >\n      {forceRender || selected ? children : null}\n    </div>\n  );\n};\n\nTabPanel.tabsRole = 'TabPanel';\nTabPanel.propTypes = propTypes;\nTabPanel.defaultProps = defaultProps;\nexport default TabPanel;\n"],"names":["makeTypeChecker","tabsRole","element","type","isTab","isTabList","isTabPanel","deepMap","children","callback","Children","map","child","isTabChild","props","cloneElement","deepForEach","forEach","toVal","mix","k","y","str","Array","isArray","length","cx","i","tmp","x","arguments","count","uuid","getTabsCount","tabCount","canUseActiveElement","isNode","node","isTabNode","getAttribute","isTabDisabled","UncontrolledTabs","tabNodes","useRef","tabIds","panelIds","ref","setSelected","index","event","onSelect","selectedIndex","getNextTab","getTab","getPrevTab","getTabsCountHelper","current","handleClick","e","target","isTabFromContainer","slice","call","parentNode","filter","indexOf","nodeAncestor","parentElement","className","disabledTabClassName","domRef","focus","forceRenderTabPanel","selectedTabClassName","selectedTabPanelClassName","environment","disableUpDownKeys","attributes","_excluded","React","onClick","onKeyDown","handleKeyDown","direction","preventDefault","useSelectedIndex","keyCode","getLastTab","getFirstTab","diff","push","result","listIndex","wasTabFocused","env","window","undefined","document","activeElement","determineCanUseActiveElement","toArray","some","tab","key","selected","tabRef","id","panelId","selectedClassName","disabledClassName","tabId","forceRender","getChildren","defaultProps","Tabs","defaultFocus","defaultIndex","focusTabOnClick","useState","_useState","setFocus","_useState2","getModeFromProps","mode","_useState3","setSelectedIndex","useEffect","tabsCount","maxTabIndex","Math","max","min","handleSelected","subProps","last","TabList","role","DEFAULT_CLASS","DEFAULT_PROPS","Tab","_cx","nodeRef","disabled","tabIndex","TabPanel"],"mappings":"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"}