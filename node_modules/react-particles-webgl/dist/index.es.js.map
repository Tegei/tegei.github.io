{"version":3,"file":"index.es.js","sources":["../src/lib/animate.js","../src/shaders/LineShaders.js","../src/lib/computeLines.js","../src/shaders/ParticleShaders.js","../src/lib/computeParticles.js","../src/ParticleField.js","../src/config.js","../src/index.js"],"sourcesContent":["/* eslint-disable no-shadow */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-continue */\n/* eslint-disable no-param-reassign */\n\n/**\n * Calculate new velocity/position of current particle if it hits x, y, or z boundary\n *\n * Controlled by boundaryType, either 'bounce' or 'passthru'\n */\nconst handleBoundary = ({\n  /* The boundaries of the particle field */\n  bounds,\n  /* Either 'bounce' or 'passthru' */\n  boundaryType,\n  /* The x, y, z positions of current particle */\n  particlePositions,\n  /* The x, y, z velocities of current particle */\n  particleData,\n  i\n}) => {\n  // Get the boundary points of the canvas\n  // Useful for knowing when a particle is at the edge of the canvas\n  const { xBounds, yBounds, zBounds } = bounds;\n\n  // Make the current particle \"transport\" from one side of boundary to the other\n  // The particles feel like they 'disappear' and new ones are 'appearing'\n  if (boundaryType === 'passthru') {\n    // If a particle crosses the x-axis edge, send particle to the opposite x-axis edge\n    if (particlePositions[i * 3] < -xBounds / 2)\n      particlePositions[i * 3] = xBounds / 2;\n    else if (particlePositions[i * 3] > xBounds / 2)\n      particlePositions[i * 3] = -xBounds / 2;\n\n    // If a particle crosses the y-axis edge, send particle to the opposite y-axis edge\n    if (particlePositions[i * 3 + 1] < -yBounds / 2)\n      particlePositions[i * 3 + 1] = yBounds / 2;\n    else if (particlePositions[i * 3 + 1] > yBounds / 2)\n      particlePositions[i * 3 + 1] = -yBounds / 2;\n\n    // If a particle crosses the y-axis edge, send particle to the opposite y-axis edge\n    if (particlePositions[i * 3 + 2] < -zBounds / 2)\n      particlePositions[i * 3 + 2] = zBounds / 2;\n    else if (particlePositions[i * 3 + 2] > zBounds / 2)\n      particlePositions[i * 3 + 2] = -zBounds / 2;\n  } else if (boundaryType === 'bounce') {\n    // Make the current particle \"bounce\" off of the \"bounds\" of the canvas\n    // The particles behave like balls thrown at a wall\n    if (\n      particlePositions[i * 3] < -xBounds / 2 ||\n      particlePositions[i * 3] > xBounds / 2\n    )\n      particleData.velocity.x = -particleData.velocity.x;\n    if (\n      particlePositions[i * 3 + 1] < -yBounds / 2 ||\n      particlePositions[i * 3 + 1] > yBounds / 2\n    )\n      particleData.velocity.y = -particleData.velocity.y;\n    if (\n      particlePositions[i * 3 + 2] < -zBounds / 2 ||\n      particlePositions[i * 3 + 2] > zBounds / 2\n    )\n      particleData.velocity.z = -particleData.velocity.z;\n  }\n};\n\n/**\n * Animates an array of particles and lines over a three dimensional space\n *\n * This function is meant to be called from the useRender render loop -- ran on each frame\n */\nconst animate = ({\n  minDistance,\n  limitConnections,\n  maxConnections,\n  particleCount,\n  lineMeshGeometry,\n  pointCloudGeometry,\n  particlesData,\n  particlePositions,\n  linePositions,\n  lineColors,\n  bounds,\n  showLines,\n  boundaryType\n}) => {\n  let vertexpos = 0;\n  let colorpos = 0;\n  let numConnected = 0;\n\n  // Start by assuming no line connections between particles\n  for (let i = 0; i < particleCount; i += 1)\n    particlesData[i].numConnections = 0;\n\n  // Update the [x, y, z] position of each particle\n  for (let i = 0; i < particleCount; i += 1) {\n    // The current particle\n    const particleData = particlesData[i];\n    particlePositions[i * 3] += particleData.velocity.x;\n    particlePositions[i * 3 + 1] += particleData.velocity.y;\n    particlePositions[i * 3 + 2] += particleData.velocity.z;\n\n    // Calculate new velocity/position of current particle if it hits x, y, or z boundary\n    // Controlled by boundaryType, either 'bounce' or 'passthru'\n    handleBoundary({\n      bounds,\n      boundaryType,\n      particlePositions,\n      particleData,\n      i\n    });\n\n    // Skip to next particle if we are intentionally not drawing lines\n    if (\n      !showLines ||\n      (limitConnections && particleData.numConnections >= maxConnections)\n    )\n      continue;\n\n    // Calculate the distance between particles to find nearest-neighbors\n    // If particles fall within the threshold, draw a line connecting them\n    for (let j = i + 1; j < particleCount; j += 1) {\n      // The \"other\" particle to compare to \"this\" one\n      const particleDataB = particlesData[j];\n\n      // Skip to next particle(don't draw more lines) if some limiting factor has been met\n      if (limitConnections && particleDataB.numConnections >= maxConnections)\n        continue;\n\n      // Calculate the distance between \"this\" particle and the \"other\" particle\n      const dx = particlePositions[i * 3] - particlePositions[j * 3];\n      const dy = particlePositions[i * 3 + 1] - particlePositions[j * 3 + 1];\n      const dz = particlePositions[i * 3 + 2] - particlePositions[j * 3 + 2];\n      const dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n      // If \"this\" particle is close enough to the \"other\" particle, draw a line connecting the two\n      if (dist < minDistance) {\n        // Increment the number of connections by one on both particles\n        particleData.numConnections += 1;\n        particleDataB.numConnections += 1;\n\n        // The lines become more transparent the further apart the particles become\n        // The line fragment shader applies this alpha attribute when coloring the lines\n        const alpha = 1.0 - dist / minDistance;\n\n        // Set the line position's [x, y, z] position at \"this\" point and the \"other\" point\n        linePositions[vertexpos++] = particlePositions[i * 3];\n        linePositions[vertexpos++] = particlePositions[i * 3 + 1];\n        linePositions[vertexpos++] = particlePositions[i * 3 + 2];\n        linePositions[vertexpos++] = particlePositions[j * 3];\n        linePositions[vertexpos++] = particlePositions[j * 3 + 1];\n        linePositions[vertexpos++] = particlePositions[j * 3 + 2];\n        lineColors[colorpos++] = alpha;\n        lineColors[colorpos++] = alpha;\n        lineColors[colorpos++] = alpha;\n        lineColors[colorpos++] = alpha;\n        lineColors[colorpos++] = alpha;\n        lineColors[colorpos++] = alpha;\n        numConnected += 1;\n      }\n    }\n  }\n\n  // Signal to Three.js that the line and point geometry have changed\n  lineMeshGeometry.setDrawRange(0, numConnected * 2);\n  lineMeshGeometry.attributes.position.needsUpdate = true;\n  lineMeshGeometry.attributes.color.needsUpdate = true;\n  pointCloudGeometry.attributes.position.needsUpdate = true;\n};\n\nexport default animate;\n","import hexRgb from 'hex-rgb';\nimport isHex from 'is-hexcolor';\n\n/**\n * Converts a hex color to gl_FragColor format\n *\n * @param {string} color A hex color\n */\nconst genColorFromHex = ({ color }) => {\n  if (!isHex(color)) return `1, 1, 1`;\n\n  const { red, green, blue } = hexRgb(color);\n  return `${(red / 255).toFixed(2)}, ${(green / 255).toFixed(2)}, ${(\n    blue / 255\n  ).toFixed(2)}`;\n};\n\n/**\n * Line shader color for solid colors option\n *\n * @param {string} color A hex color\n */\nconst solidLineColors = ({ color }) => `\n  vColor = vec3(${genColorFromHex({ color })});\n`;\n\n/**\n * Line shader color for rainbow colors option\n */\nconst rainbowLineColors = `\n  vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n  vColor = normalize( abs( worldPosition.xyz ) );\n`;\n\n/**\n * Generates a vertex shader for a connecting line in a particle system\n *\n * This shader uses the position of particles to determine their color\n * and change them as they move\n */\nexport const getLineVertexShader = ({ colorMode, color }) => `\n// Amount of transparency for line, calculated in Animate\nattribute float color;\n\n// Calculate color based on line position\nvarying vec3 vColor;\nvarying float alpha;\n\nvoid main() {\n  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n  gl_Position = projectionMatrix * mvPosition;\n\n  ${colorMode === 'rainbow' ? rainbowLineColors : ''}\n  ${colorMode === 'solid' ? solidLineColors({ color }) : ''}\n  alpha = color;\n}\n`;\n\n/**\n * Applies a color to a connecting line in a particle system\n */\nexport const getLineFragmentShader = ({ transparency }) => `\n// Color calculated from vertex shader, based on line position\nvarying vec3 vColor;\n// Amount of transparency from vertex shader, based on distance between particles\nvarying float alpha;\n\nvoid main() {\n  gl_FragColor = vec4( vColor, alpha * ${transparency});\n}\n`;\n","import {\n  AdditiveBlending,\n  BufferAttribute,\n  BufferGeometry,\n  ShaderMaterial\n} from 'three';\nimport {\n  getLineVertexShader,\n  getLineFragmentShader\n} from '../shaders/LineShaders';\n\nexport default ({ particles, lines }) => {\n  const { count } = particles;\n  const { color, colorMode, transparency, visible } = lines;\n\n  // Line material\n  const lineMeshMaterial = new ShaderMaterial({\n    vertexShader: getLineVertexShader({ colorMode, color }),\n    fragmentShader: getLineFragmentShader({ transparency }),\n    transparent: true,\n    blending: AdditiveBlending,\n    visible\n  });\n\n  // Line mesh geometry\n  const lineMeshGeometry = new BufferGeometry();\n  const segments = count * count;\n  const positions = new Float32Array(segments * 3);\n  const colors = new Float32Array(segments * 3);\n\n  lineMeshGeometry.addAttribute(\n    'position',\n    new BufferAttribute(positions, 3).setDynamic(true)\n  );\n  lineMeshGeometry.addAttribute(\n    'color',\n    new BufferAttribute(colors, 3).setDynamic(true)\n  );\n  lineMeshGeometry.computeBoundingSphere();\n  lineMeshGeometry.setDrawRange(0, 0);\n\n  return [lineMeshGeometry, lineMeshMaterial, positions, colors];\n};\n","import hexRgb from 'hex-rgb';\nimport isHex from 'is-hexcolor';\n\n/**\n * Converts a hex color to gl_FragColor format\n *\n * @param {string} color A hex color\n */\nconst genColorFromHex = ({ color }) => {\n  if (!isHex(color)) return `1, 1, 1`;\n\n  const { red, green, blue } = hexRgb(color);\n  return `${(red / 255).toFixed(2)}, ${(green / 255).toFixed(2)}, ${(\n    blue / 255\n  ).toFixed(2)}`;\n};\n\n/**\n * Vertex shader color for solid colors option\n *\n * @param {string} color A hex color\n */\nconst solidVertexColors = ({ color }) => `\n  vColor = vec3(${genColorFromHex({ color })});\n`;\n\n/**\n * Vertex shader color for rainbow colors option\n */\nconst rainbowVertextColors = `\n  vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n  vColor = vec3( normalize( abs( worldPosition.xyz ) ));\n`;\n\n/**\n * Generates a vertex shader for a particle system\n *\n * This shader uses the position of particles to determine their color\n * and change them as they move\n */\nexport const getParticleVertexShader = ({\n  colorMode,\n  color,\n  devicePixelRatio\n}) => `\n// Size attribute for particle geometry\nattribute float size;\n\n// Calculate color based on particle position\nvarying vec3 vColor;\n\nvoid main() {\n  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n  gl_PointSize = size * ( 300.0 / -mvPosition.z ) * ${devicePixelRatio};\n  gl_Position = projectionMatrix * mvPosition;\n\n  ${colorMode === 'rainbow' ? rainbowVertextColors : ''}\n  ${colorMode === 'solid' ? solidVertexColors({ color }) : ''}\n}\n`;\n\n// \"Cuts\" a circle out of the default square shape\n// by setting the \"leftovers\" as transparent\nconst circleParticleShape = `\nfloat r = 0.0, delta = 0.0, alpha = 1.0;\nvec2 cxy = 2.0 * gl_PointCoord - 1.0;\nr = dot(cxy, cxy);\nif (r > 1.0) {\n    discard;\n}\n`;\n\n/**\n * Applies a shape to each particle\n *\n * @param {String} particleShape Either 'circle' or 'square'\n * @param {Number} transparency The alpha channel rgba value for particles\n */\nexport const getParticleFragmentShader = ({ particleShape, transparency }) => `\n// Color from uniforms arg\nuniform vec3 color;\n\n// Color calculated from vertex shader, based on particle position\nvarying vec3 vColor;\n\nvoid main() {\n  ${particleShape === 'circle' ? circleParticleShape : ''}\n  gl_FragColor = vec4(vColor, ${transparency});\n}\n`;\n","import {\n  AdditiveBlending,\n  BufferAttribute,\n  BufferGeometry,\n  ShaderMaterial,\n  Vector3\n} from 'three';\nimport {\n  getParticleVertexShader,\n  getParticleFragmentShader\n} from '../shaders/ParticleShaders';\n\nexport default ({\n  particles,\n  dimension,\n  devicePixelRatio,\n  direction,\n  size,\n  r,\n  velocity\n}) => {\n  const {\n    boundingBox,\n    count,\n    colorMode,\n    color,\n    shape,\n    transparency,\n    minSize,\n    maxSize,\n    visible\n  } = particles;\n  // Add particles to geometry\n  // Maintain two arrays\n  // particlePositions contains random x,y,z coords for each particle\n  // particlesData contains a random x,y,z velocity vector for each particle\n  const pointCloudGeometry = new BufferGeometry();\n  const particlePositions = new Float32Array(count * 3);\n  const particleSizes = new Float32Array(count);\n  const particlesData = [];\n\n  let xBounds;\n  let yBounds;\n  let zBounds;\n  if (boundingBox === 'canvas') {\n    // Adjust size of particle field contstraints based on\n    // whether field is 2D or 3D\n    xBounds = dimension === '2D' ? size.width : size.width;\n    yBounds = dimension === '2D' ? size.height : size.height * 1.5;\n    zBounds = dimension === '2D' ? 0 : size.width;\n  }\n  if (boundingBox === 'cube') {\n    xBounds = r;\n    yBounds = r;\n    zBounds = dimension === '2D' ? 0 : r;\n  }\n\n  for (let i = 0; i < count; i += 1) {\n    // Calculate possible (x, y, z) location of particle\n    // within the size of the canvas or cube size\n    const x = Math.random() * xBounds - xBounds / 2;\n    const y = Math.random() * yBounds - yBounds / 2;\n    const z = Math.random() * zBounds - zBounds / 2;\n    particlePositions[i * 3] = x;\n    particlePositions[i * 3 + 1] = y;\n    particlePositions[i * 3 + 2] = z;\n\n    // Choose size of each particle\n    particleSizes[i] = Math.random() * (maxSize - minSize) + minSize;\n\n    // Calculates a random number between given range\n    const getVelocityMultiplier = (min, max) =>\n      Math.random() * (max - min) + min;\n\n    const { xMin, xMax, yMin, yMax, zMin, zMax } = direction;\n\n    particlesData.push({\n      velocity: new Vector3(\n        getVelocityMultiplier(xMin, xMax) * velocity,\n        getVelocityMultiplier(yMin, yMax) * velocity,\n        getVelocityMultiplier(zMin, zMax) * velocity\n      ),\n      numConnections: 0\n    });\n  }\n\n  pointCloudGeometry.setDrawRange(0, count);\n  pointCloudGeometry.addAttribute(\n    'position',\n    new BufferAttribute(particlePositions, 3).setDynamic(true)\n  );\n  pointCloudGeometry.addAttribute(\n    'size',\n    new BufferAttribute(particleSizes, 1).setDynamic(true)\n  );\n\n  // Material for particle, use shaders to morph shape and color\n  const pointMaterial = new ShaderMaterial({\n    vertexShader: getParticleVertexShader({\n      colorMode,\n      color,\n      devicePixelRatio\n    }),\n    fragmentShader: getParticleFragmentShader({\n      particleShape: shape,\n      transparency\n    }),\n    transparent: transparency < 1,\n    blending: AdditiveBlending,\n    visible\n  });\n\n  // The x,y,z bounds of possible particle positions\n  // needed for Animate function\n  const bounds = {\n    xBounds,\n    yBounds,\n    zBounds\n  };\n\n  return [\n    pointCloudGeometry,\n    pointMaterial,\n    particlesData,\n    particlePositions,\n    bounds\n  ];\n};\n","/* eslint-disable no-shadow */\nimport React, { useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { AdditiveBlending } from 'three';\nimport { useRender, useThree } from 'react-three-fiber';\nimport OrbitControls from 'three-orbitcontrols';\nimport animate from './lib/animate';\nimport computeLines from './lib/computeLines';\nimport computeParticles from './lib/computeParticles';\n\n// Default Cube dimensions\nconst r = 400;\n\n/**\n * Creates a particle cloud with various config options\n */\nconst ParticleField = ({\n  particles,\n  lines,\n  direction,\n  showCube,\n  cameraControls,\n  dimension,\n  velocity,\n  boundaryType\n}) => {\n  const controlsRef = useRef(0);\n  const animation = useRef(0);\n  const group = useRef();\n\n  const { gl, canvas, camera, size } = useThree();\n  // Scale rendering automatically to window DPI\n  // Pass this value to fragment shaders: gl_PointSize needs to scale against this value\n  // https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setPixelRatio\n  const devicePixelRatio = window.devicePixelRatio.toFixed(1);\n  gl.setPixelRatio(devicePixelRatio);\n\n  // Default distance from camera to particle field\n  const distToParticles = 1750;\n\n  // Setup camera\n  controlsRef.current = useMemo(() => {\n    const aspectRatio = size.width / size.height;\n    // Calculates the proper FOV for 2D particle field to\n    // perfectly fill canvas\n    const cameraFOV =\n      2 *\n      Math.atan(size.width / aspectRatio / (2 * distToParticles)) *\n      (180 / Math.PI);\n\n    camera.fov = cameraFOV;\n    camera.aspect = aspectRatio;\n    camera.near = 1;\n    // Allow field to stay in view while zooming really far out\n    camera.far = 10000;\n\n    // Remove event listeners from previous controls if they exist\n    // Set initial camera position if controls haven't taken over yet\n    if (controlsRef.current) controlsRef.current.dispose();\n    else camera.position.set(0, 0, distToParticles);\n\n    // Setup movement controls for mouse/touch to manipulate camera position\n    // https://threejs.org/docs/#examples/controls/OrbitControls\n    const controls = new OrbitControls(camera, canvas);\n\n    // Apply given settings to camera controls\n    Object.entries(cameraControls).forEach(([key, value]) => {\n      controls[key] = value;\n    });\n\n    return controls;\n  }, [camera, cameraControls, canvas, size.height, size.width]);\n\n  // When the resetCameraFlag option is toggled to 'true', reset camera position\n  if (cameraControls.resetCameraFlag === true) {\n    camera.position.set(0, 0, 1750);\n  }\n\n  // Compute lines between points\n  const [\n    lineMeshGeometry,\n    lineMeshMaterial,\n    linePositions,\n    lineColors\n  ] = useMemo(() => computeLines({ particles, lines }), [particles, lines]);\n\n  // Compute point cloud\n  const [\n    pointCloudGeometry,\n    pointMaterial,\n    particlesData,\n    particlePositions,\n    bounds\n  ] = useMemo(\n    () =>\n      computeParticles({\n        particles,\n        dimension,\n        devicePixelRatio,\n        direction,\n        size,\n        r,\n        velocity\n      }),\n    [particles, dimension, direction, devicePixelRatio, size, velocity]\n  );\n\n  // Assign state to animation ref\n  // This object is passed to Animation.js in render loop\n  animation.current = {\n    minDistance: lines.minDistance,\n    limitConnections: lines.limitConnections,\n    maxConnections: lines.maxConnections,\n    particleCount: particles.count,\n    bounds,\n    lineMeshGeometry,\n    pointCloudGeometry,\n    particlesData,\n    particlePositions,\n    linePositions,\n    lineColors,\n    showLines: lines.visible,\n    boundaryType\n  };\n\n  // Direct access to render loop, executes on each frame\n  // State changes must be passed into hook via refs\n  // useRender() contents are called in a requestAnimationFrame()\n  useRender(() => {\n    // Enables damping of OrbitControls\n    controlsRef.current.update();\n    // Animate current state of particles + lines\n    animate(animation.current);\n  });\n\n  return (\n    <scene>\n      <group ref={group}>\n        {/* Bounding box that particles exist inside of */}\n        {showCube && (\n          <boxHelper>\n            <mesh name=\"object\">\n              <meshBasicMaterial\n                attach=\"material\"\n                color=\"white\"\n                blending={AdditiveBlending}\n                wireframe\n                transparent\n              />\n              <boxBufferGeometry attach=\"geometry\" args={[r, r, r]} />\n            </mesh>\n          </boxHelper>\n        )}\n        {/* Lines connecting particles */}\n        {lines.visible && (\n          <lineSegments\n            geometry={lineMeshGeometry}\n            material={lineMeshMaterial}\n          />\n        )}\n\n        {/* Particles */}\n        {particles.visible && (\n          <points geometry={pointCloudGeometry} material={pointMaterial} />\n        )}\n      </group>\n    </scene>\n  );\n};\n\nParticleField.propTypes = {\n  showCube: PropTypes.bool.isRequired,\n  dimension: PropTypes.oneOf(['2D', '3D']).isRequired,\n  boundaryType: PropTypes.oneOf(['bounce', 'passthru']).isRequired,\n  velocity: PropTypes.number.isRequired,\n  direction: PropTypes.shape({\n    xMin: PropTypes.number,\n    xMax: PropTypes.number,\n    yMin: PropTypes.number,\n    yMax: PropTypes.number,\n    zMin: PropTypes.number,\n    zMax: PropTypes.number\n  }).isRequired,\n  lines: PropTypes.shape({\n    colorMode: PropTypes.oneOf(['rainbow', 'solid']),\n    color: PropTypes.string,\n    transparency: PropTypes.number,\n    maxConnections: PropTypes.number,\n    limitConnections: PropTypes.bool,\n    minDistance: PropTypes.number,\n    visible: PropTypes.bool\n  }).isRequired,\n  particles: PropTypes.shape({\n    count: PropTypes.number,\n    minSize: PropTypes.number,\n    maxSize: PropTypes.number,\n    boundingBox: PropTypes.oneOf(['canvas', 'cube']),\n    shape: PropTypes.oneOf(['circle', 'square']),\n    colorMode: PropTypes.oneOf(['rainbow', 'solid']),\n    color: PropTypes.string,\n    transparency: PropTypes.number,\n    visible: PropTypes.bool\n  }).isRequired,\n  cameraControls: PropTypes.shape({\n    enabled: PropTypes.bool,\n    enableDamping: PropTypes.bool,\n    dampingFactor: PropTypes.number,\n    enableZoom: PropTypes.bool,\n    autoRotate: PropTypes.bool,\n    autoRotateSpeed: PropTypes.number,\n    resetCameraFlag: PropTypes.bool\n  }).isRequired\n};\n\nexport default ParticleField;\n","/**\n * The default configuation for the ParticleField component\n *\n * Any option passed in via props will overwrite the default config\n */\nexport default {\n  showCube: true,\n  dimension: '3D',\n  velocity: 2,\n  boundaryType: 'bounce',\n  antialias: false,\n  direction: {\n    xMin: -1,\n    xMax: 1,\n    yMin: -1,\n    yMax: 1,\n    zMin: -1,\n    zMax: 1\n  },\n  lines: {\n    colorMode: 'rainbow',\n    color: '#351CCB',\n    transparency: 0.9,\n    limitConnections: true,\n    maxConnections: 20,\n    minDistance: 150,\n    visible: true\n  },\n  particles: {\n    colorMode: 'rainbow',\n    color: '#3FB568',\n    transparency: 0.9,\n    shape: 'square',\n    boundingBox: 'canvas',\n    count: 500,\n    minSize: 10,\n    maxSize: 75,\n    visible: true\n  },\n  cameraControls: {\n    enabled: true,\n    enableDamping: true,\n    dampingFactor: 0.2,\n    enableZoom: true,\n    autoRotate: true,\n    autoRotateSpeed: 0.3,\n    resetCameraFlag: false\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Canvas } from 'react-three-fiber';\nimport merge from 'lodash.merge';\nimport ParticleField from './ParticleField';\nimport initialConfig from './config';\n\n/**\n * Creates a 2D/3D particle field with react-three-fiber, three.js and WebGL\n *\n * Documentation on the configuration object can be found in the github repo\n * @see https://github.com/tim-soft/react-particles-webgl\n *\n * For a real-time configuration generator and various demos\n * @see https://timellenberger.com/particles\n */\nconst ParticleCanvas = ({ config }) => {\n  const [clientSide, setClientSide] = useState(false);\n  useEffect(() => {\n    setClientSide(true);\n  }, []);\n\n  if (!clientSide) return null;\n\n  return (\n    <Canvas\n      gl={{\n        antialias: Object.prototype.hasOwnProperty.call(config, 'antialias')\n          ? config.antialias\n          : initialConfig.antialias\n      }}\n    >\n      <ParticleField {...merge({}, initialConfig, config)} />\n    </Canvas>\n  );\n};\n\nParticleCanvas.propTypes = {\n  config: PropTypes.object\n};\n\nParticleCanvas.defaultProps = {\n  config: {}\n};\n\nexport default ParticleCanvas;\n\nexport const defaultConfig = { ...initialConfig };\n"],"names":["handleBoundary","bounds","boundaryType","particlePositions","particleData","i","xBounds","yBounds","zBounds","velocity","x","y","z","animate","minDistance","limitConnections","maxConnections","particleCount","lineMeshGeometry","pointCloudGeometry","particlesData","linePositions","lineColors","showLines","vertexpos","colorpos","numConnected","numConnections","j","particleDataB","dx","dy","dz","dist","Math","sqrt","alpha","setDrawRange","attributes","position","needsUpdate","color","genColorFromHex","isHex","hexRgb","red","green","blue","toFixed","solidLineColors","rainbowLineColors","getLineVertexShader","colorMode","getLineFragmentShader","transparency","particles","lines","count","visible","lineMeshMaterial","ShaderMaterial","vertexShader","fragmentShader","transparent","blending","AdditiveBlending","BufferGeometry","segments","positions","Float32Array","colors","addAttribute","BufferAttribute","setDynamic","computeBoundingSphere","solidVertexColors","rainbowVertextColors","getParticleVertexShader","devicePixelRatio","circleParticleShape","getParticleFragmentShader","particleShape","dimension","direction","size","r","boundingBox","shape","minSize","maxSize","particleSizes","width","height","random","getVelocityMultiplier","min","max","xMin","xMax","yMin","yMax","zMin","zMax","push","Vector3","pointMaterial","ParticleField","showCube","cameraControls","controlsRef","useRef","animation","group","useThree","gl","canvas","camera","window","setPixelRatio","distToParticles","current","useMemo","aspectRatio","cameraFOV","atan","PI","fov","aspect","near","far","dispose","set","controls","OrbitControls","Object","entries","forEach","key","value","resetCameraFlag","computeLines","computeParticles","useRender","update","antialias","enabled","enableDamping","dampingFactor","enableZoom","autoRotate","autoRotateSpeed","ParticleCanvas","config","useState","clientSide","setClientSide","useEffect","prototype","hasOwnProperty","call","initialConfig","merge","defaultProps","defaultConfig"],"mappings":"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"}